{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\App.svelte",
    "..\\Card.svelte",
    "..\\Home.svelte",
    "..\\Reading.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Home from \"./views/Home.svelte\";\n  import Reading from \"./views/Reading.svelte\";\n\n  import { appState } from \"./stores.js\";\n</script>\n\n<style>\n  main {\n    font-family: sans-serif;\n    text-align: center;\n  }\n</style>\n\n<main>\n  {#if $appState == 'home'}\n    <Home />\n  {:else if $appState == 'reading'}\n    <Reading />\n  {/if}\n</main>",
    "<script>\r\n  export let cardData;\r\n\r\n  const cardImagePath = \"./\" + cardData[\"name\"].toLowerCase() + \".png\";\r\n</script>\r\n\r\n<style>\r\n  main {\r\n    font-family: sans-serif;\r\n    text-align: center;\r\n  }\r\n  .outter-card-container {\r\n    margin: 4px;\r\n  }\r\n  .card-container {\r\n    position: relative;\r\n    height: 200px;\r\n    width: 120px;\r\n    background: black;\r\n    border-radius: 10px;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n  .card-number {\r\n    color: white;\r\n    margin: 0;\r\n    position: absolute;\r\n    top: 10px;\r\n    left: 10px;\r\n  }\r\n  .card-name {\r\n    color: white;\r\n    margin: 0;\r\n    position: absolute;\r\n    bottom: 5px;\r\n    right: 10px;\r\n  }\r\n  .card-image {\r\n    width: 100px;\r\n    filter: invert(100%);\r\n  }\r\n  .meaning-1,\r\n  .meaning-2,\r\n  .meaning-3 {\r\n    margin: 0;\r\n    color: white;\r\n    width: 120px;\r\n    font-size: 12px;\r\n  }\r\n  .meaning-1-container,\r\n  .meaning-2-container,\r\n  .meaning-3-container {\r\n    margin-top: 7px;\r\n    background-color: black;\r\n    width: 120px;\r\n    height: 25px;\r\n    border-radius: 100px;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n</style>\r\n\r\n<main>\r\n  <div class=\"outter-card-container\">\r\n    <div class=\"card-container\">\r\n      <p class=\"card-number\"> {cardData['number']} </p>\r\n      <p class=\"card-name\"> {cardData['name']} </p>\r\n      <img class=\"card-image\" src={cardImagePath} alt=\"Girl in a jacket\" />\r\n    </div>\r\n\r\n    <div class='meaning-1-container'>\r\n      <p class='meaning-1'> {cardData['meaning-1']} </p>\r\n    </div>\r\n    <div class='meaning-2-container'>\r\n      <p class='meaning-2'> {cardData['meaning-2']} </p>\r\n    </div>\r\n    <div class='meaning-3-container'>\r\n      <p class='meaning-3'> {cardData['meaning-3']} </p>\r\n    </div>\r\n  </div>\r\n</main>",
    "<script>\r\n  import {\r\n    appState,\r\n    numberOfCards,\r\n    currentQuestion,\r\n    pastQuestions,\r\n    cardData\r\n  } from \"../stores.js\";\r\n  import Card from \"../components/Card.svelte\";\r\n\r\n  const startReading = (number, question) => {\r\n    appState.set(\"reading\");\r\n    numberOfCards.set(number);\r\n    currentQuestion.set(question);\r\n  };\r\n\r\n  let inputText = \"\";\r\n</script>\r\n\r\n<style>\r\n  main {\r\n    font-family: sans-serif;\r\n    text-align: center;\r\n  }\r\n  .outter-container {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n  }\r\n  .main-input {\r\n    height: 15px;\r\n    width: 500px;\r\n    padding: 8px;\r\n    font-size: 15px;\r\n    border: solid black 2px;\r\n    border-radius: 5px;\r\n    text-align: center;\r\n  }\r\n  .main-button {\r\n    height: 40px;\r\n    width: 200px;\r\n    margin-bottom: 20px;\r\n    border: none;\r\n    background: black;\r\n    color: white;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n  }\r\n  .tutorial-cards-container {\r\n    zoom: 60%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: row;\r\n  }\r\n</style>\r\n\r\n<main class=\"outter-container\">\r\n\t<h1>Lenormand</h1>\r\n  <p> Think about what you want to ask </p>\r\n  <input class=\"main-input\" type=\"text\" placeholder={'Write your question here'} bind:value={inputText} />\r\n  \r\n  <p> Choose the type of reading... </p>\r\n  <button class=\"main-button\" on:click={() => startReading(2, inputText)}>Read simple question</button>\r\n  <button class=\"main-button\" on:click={() => startReading(6, inputText)}>Read past, present, future</button>\r\n\r\n  <h2>Past questions</h2>\r\n  {#each $pastQuestions as question}\r\n    <p> {question.question}</p>\r\n    <div class=\"tutorial-cards-container\">\r\n      {#each question.cards as card}\r\n        <Card cardData={$cardData[card]}/>\r\n      {/each}\r\n    </div>\r\n  {/each}\r\n</main>",
    "<script>\r\n  import {\r\n    appState,\r\n    cardData,\r\n    numberOfCards,\r\n    currentQuestion,\r\n    pastQuestions\r\n  } from \"../stores.js\";\r\n  import Card from \"../components/Card.svelte\";\r\n\r\n  const addCurrentQuestionToPastQuestion = () => {\r\n    $pastQuestions = [\r\n      ...$pastQuestions,\r\n      {\r\n        question: $currentQuestion,\r\n        cards: drawnCards\r\n      }\r\n    ];\r\n  };\r\n\r\n  const stopReading = () => {\r\n    appState.set(\"home\");\r\n    addCurrentQuestionToPastQuestion();\r\n  };\r\n\r\n  const drawCard = cardsArray => {\r\n    const newNumber = Math.floor(Math.random() * 35);\r\n    const newNumberIsRepeated = cardsArray.find(cardNumber => {\r\n      cardNumber == newNumber;\r\n    });\r\n\r\n    if (newNumberIsRepeated) {\r\n      drawCard(cardsArray);\r\n    } else {\r\n      return newNumber;\r\n    }\r\n  };\r\n\r\n  let drawnCards = [];\r\n  for (let i = 0; i < $numberOfCards; i++) {\r\n    drawnCards.push(drawCard(drawnCards));\r\n  }\r\n</script>\r\n\r\n<style>\r\n  main {\r\n    font-family: sans-serif;\r\n    text-align: center;\r\n  }\r\n  .outter-container {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n  }\r\n  .cards-container {\r\n    display: flex;\r\n  }\r\n  .main-button {\r\n    height: 40px;\r\n    width: 100px;\r\n    margin-top: 30px;\r\n    border: none;\r\n    background: black;\r\n    color: white;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n  }\r\n  .tutorial-header {\r\n    margin: 0;\r\n    margin-top: 20px;\r\n  }\r\n  .tutorial-cards-container {\r\n    zoom: 60%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: row;\r\n  }\r\n</style>\r\n\r\n<main class=\"outter-container\">\r\n\t<h1>{$currentQuestion}</h1>\r\n  <div class=\"cards-container\">\r\n    {#each drawnCards as card}\r\n      <Card cardData={$cardData[card]}/>\r\n    {/each}\r\n  </div>\r\n  <button class=\"main-button\" on:click={() => stopReading()}>Go back</button>\r\n  \r\n  <h2 class=\"tutorial-header\"> HOW TO READ </h2>\r\n  <p> Read the cards in pairs. <br> \r\n  The first card acts as a noun. <br> \r\n  The second card acts as an adjective.</p>\r\n  <p> For example: </p>\r\n  <div class=\"tutorial-cards-container\">\r\n    <Card cardData={$cardData[11]}/>\r\n    <Card cardData={$cardData[12]}/>\r\n  </div>\r\n  <p> Inocent communication <br>\r\n  Beginning of gossiping <br>\r\n  Inexperienced speech</p>\r\n\r\n  <p> Cards may have multiple meanings. <br> Interpret them according to your context.</p>\r\n</main>"
  ],
  "names": [],
  "mappings": "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"
}